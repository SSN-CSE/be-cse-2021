g* 405 <<<DESIGN AND ANALYSIS OF ALGORITHMS>>>
:properties:
:author: Dr S Kavitha, Dr V Balasubramanian, Dr R S Milton
:date: 29-03-2021
:end:

#+startup: showall

{{{credits}}}
| L | T | P | C |
| 3 | 0 | 2 | 4 |

** R2021 CHANGES :noexport:
1. Brute force dropped
2. Reordered topics
   1. Divide-and-conquer
   2. Backtracking
   3. Dynamic programming
   4. Greedy
   5. Iterative improvement
3. Under iterative improvement: Simplex dropped; Stable matching and
   Maximum network flow added.
4. Under DP: Ordering in matrix multiplication added
5. Suggested programs slightly changed
6. Jeff Erickson added as a textbook. Dasgupta book moved to
   reference.

** CO-PO-PSO MAPPING                                               :noexport:
#+NAME: co-po-pso mapping
|                |    | PO1 | PO2 | PO3 | PO4 | PO5 | PO6 | PO7 | PO8 | PO9 | PO10 | PO11 | PO12 | PSO1 | PSO2 | PSO3 |
| CO1            | K3 |   2 |   2 |   1 |   0 |   0 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    1 |    0 |    0 |
| CO2            | K4 |   3 |   3 |   2 |   3 |   0 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    2 |    0 |    0 |
| CO3            | K4 |   3 |   3 |   3 |   2 |   3 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    2 |    0 |    0 |
| CO4            | K4 |   3 |   3 |   2 |   3 |   0 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    1 |    0 |    0 |
| CO5            | K2 |   3 |   3 |   1 |   0 |   0 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    1 |    0 |    0 |
| CO6            | K3 |   3 |   2 |   2 |   3 |   3 |   0 |   0 |   1 |   3 |    1 |    0 |    2 |    2 |    0 |    2 |
| Score          |    |  17 |  16 |  11 |  11 |   3 |   0 |   0 |   1 |   3 |    1 |    0 |    2 |    9 |    0 |    2 |
| Course mapping |    |   3 |   3 |   2 |   2 |   1 |   0 |   0 |   1 |   1 |    1 |    0 |    1 |    2 |    0 |    1 |
#+tblfm: @>$3..@>$>='(ceiling (/ (* 1.0 (apply '+ '(@<<..@>>)))(length '(@<<..@>>))));N

** COURSE OBJECTIVES
- To learn algorithms analysis techniques.
- To analyze the asymptotic performance of algorithms.
- To apply different algorithm design strategies.
- To prove the limitations of algorithmic power.
- To demonstrate the familiarity with important algorithms and data
  structures.


{{{unit}}}
| UNIT I | INTRODUCTION AND ANALYSIS | 9 |
Introduction: Fundamentals of algorithmic problem solving -- Important
problem types; Fundamentals of the Analysis of Algorithm Efficiency:
Analysis framework -- Asymptotic notations and basic efficiency
classes -- Mathematical analysis for recursive and non-recursive
algorithms.

{{{unit}}}
| UNIT II | DIVIDE-AND-CONQUER, BACKTRACKING | 9 |
Divide and Conquer: Mergesort -- Quicksort -- Multiplication of large
integers -- Strassen's matrix multiplication; Backtracking: Subset sum
-- N-queens problem -- Hamiltonian circuit problem.

{{{unit}}}
| UNIT III | DYNAMIC PROGRAMMING, GREEDY | 9 |
Dynamic Programming: Computing a binomial coefficient -- Knapsack
problem and memory functions -- Ordering of matrix multiplications --
Warshall's and Floyd's algorithm; Greedy Technique: Dijkstra's
algorithm, Prim's algorithm -- Kruskal's algorithm.

{{{unit}}}
|UNIT IV | ITERATIVE IMPROVEMENT, BRANCH-AND-BOUND |9| 
Iterative Improvement: Stable matching -- Maximum Network Flow --
Maximum matching in bipartite graphs; Branch and Bound: Knapsack
problem -- Traveling salesman problem.

{{{unit}}}
| UNIT V | LIMITATIONS OF ALGORITHM POWER | 9 |
Limitations of algorithm power: Lower-bound arguments -- P, NP and
NP-complete problems; Coping with the Limitations of Algorithm Power:
Approximation algorithms for NP-Hard problems -- Traveling salesman
problem -- Knapsack problem.

 *Theory Periods: 45*

** SUGGESTIVE EXPERIMENTS
1. Iterative and recursive algorithms using decrease-and-conquer
2. Backtracking: subset sum, N-queeens
3. Divide-and-conquer: Mergesort, Quicksort 
4. Dynamic Programming: Longest Increasing Subsequene, Floyd-Warshall
5. Greedy: Prim's, Dijkstra's
6. Iterative improvement: Stable matching, Network flow
7. Branch and Bound: Knapsack
8. Mini project

*Practical Periods: 30*

*Total Periods: 75*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
- Develop the analysis Asymptotic framework for various computing problems (K3)
- Analyze the time and space complexity of Divide and Conquer algorithm strategy and compare with na√Øve approach (K4)
- Distinguish the importance of Dynamic Programming and Greedy Technique (K4)
- Identify suitable algorithm design technique for optimization problems (K4)
- Understand the limitations of algorithmic power (K2).
- Develop the important algorithms with appropriate data structures (K3)

** TEXT BOOKS
1. Anany Levitin, ``Introduction to the Design and Analysis of
   Algorithms'', 3rd Edition, Pearson Education, 2012.
2. Jeff Erickson, ``Algorithms'', 1st Edition, 2019,
   https://jeffe.cs.illinois.edu/teaching/algorithms/

** REFERENCES
1. S Dasgupta, C H Papadimitriou, U V Vazirani,
   ``Algorithms'',1st Edition,  McGraw Hill Education, 2017.
2. Thomas H Cormen, Charles E Leiserson, Ronald L Rivest, Clifford
   Stein, ``Introduction to Algorithms'', 3rd Edition, PHI Learning
   Private Limited, 2012.
3. Steven S Skiena, ``The Algorithm Design Manual'', 2nd Edition,
   Springer, 2008.

#+begin_comment
** CO-PO-PSO MAPPING     
|         | PO1 | PO2 | PO3 | PO4 | PO5 | PO6 | PO7 | PO8 | PO9 | PO10 | PO11 | PO12 | PSO1 | PSO2 | PSO3 |
| CO1     |   2 |   2 |   1 |   0 |   0 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    1 |    0 |    0 |
| CO2     |   3 |   3 |   2 |   3 |   0 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    2 |    0 |    0 |
| CO3     |   3 |   3 |   3 |   2 |   3 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    2 |    0 |    2 |
| CO4     |   3 |   3 |   2 |   3 |   0 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    1 |    0 |    2 |
| CO5     |   3 |   3 |   1 |   0 |   0 |   0 |   0 |   0 |   0 |    0 |    0 |    0 |    1 |    0 |    0 |
| CO6     |   3 |   2 |   2 |   3 |   3 |   0 |   0 |   1 |   3 |    1 |    0 |    2 |    2 |    0 |    2 |
| Mapping |   3 |   3 |   2 |   2 |   1 |   0 |   0 |   1 |   1 |    1 |    0 |    1 |    2 |    0 |    1 |

#+begin_comment
- Analyse asymptotic complexity of iterative and recursive algorithmic
  problems (K3)
- Design and analyse divide-and-conquer algorithm strategy and compare
  with naive approach (K3)
- Design and analyse backtracking algorithms and where possible convert them to
  Dynamic Programming algorithms (K4)
- Design and prove Greedy and Iterative improvement algorithsm (K4)
- Prove the hardness of computing problems (K3)
- Choose appropriate algorithms for computing problems and implement
  them using efficient data structures (K4).
#+end_comment
