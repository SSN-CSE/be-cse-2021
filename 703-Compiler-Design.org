* 
:properties:
:author: Dr. S. Saraswathi 
:date: 27-02-2021 updated 09-03-2021 updated 29-03-2021
:end:

#+startup: showall
{{{title-tab}}}
| CODE    | COURSE TITLE    | L | T | P | E | C |
| UCS2702 | COMPILER DESIGN | 3 | 0 | 2 | 0 | 4 |


** R2021 CHANGES :noexport:   
1. Unit 1 suggested by BB: after Recognition of tokens added  "Conversion of Regular expression to DFA"
2. Lab Program 4 rephrased to include CO6
3. Books are updated to recent edition.
4. Modified by :Dr.S.Saraswathi on 27-02-2021 as per the suggestion given by BB,DT,BP
# DESIGN AND IMPLEMENTATION OF COMPILERS

** COURSE OBJECTIVES
- To learn various phases of a compiler
- To learn various parsing techniques
- To understand intermediate code generation 
- To learn to implement code generator 
- To learn to implement code Optimization.

{{{unit}}}
|UNIT I | INTRODUCTION TO COMPILERS | 9 |
Language processors -- Phases of compiler -- Role of lexical analyzer
-- Input buffering -- Specification of tokens -- Recognition of
tokens -- Conversion of Regular expression to DFA; Lexical analyzer generator: Structure of lex program --
Lookahead operator and conflict resolution.
#+begin_comment
Added:Lookahead operator and conflict resolution. 
Added :2021 Saraswathi : suggested by BB: after Recognition of tokens added  "Conversion of Regular expression to DFA"
#+end_comment

{{{unit}}}
|UNIT II | SYNTAX ANALYSIS | 9 |
Role of Parser -- Writing grammars for language constructs -- Types of
grammars: Ambiguity -- Deterministic and recursive; Top down parsers:
Recursive descent parser -- Predictive parser; Bottom up parsers: SLR
Parser -- CLR Parser -- LALR Parser; Error handling and recovery in
syntax analyzer; Syntax analyzer generator: Structure of yacc program
-- Creating yacc lexical analyzers with lex.


{{{unit}}}
|UNIT III | INTERMEDIATE CODE GENERATION | 9 |
Syntax directed definitions: Synthesized attribute -- Inherited
attribute -- Dependency graph -- Evaluation order of syntax directed
definitions; Intermediate languages: Syntax tree -- Three address
code; SDD for type checking -- Declarations -- Evaluation of
expressions and flow of control statements -- Bottom-up evaluation of
S-attribute definitions.
#+begin_comment
Added:evaluation of expressions and flow of control statements --
Bottom-up evaluation of S-attribute definitions.
#+end_comment

{{{unit}}}
|UNIT IV | RUNTIME ENVIRONMENTS AND CODE GENERATION | 9 |
Source language issues -- Storage organization -- Storage allocation
strategies: Static, Stack and Heap -- Implementation of symbol table
-- Issues in code generation -- Design of a simple code generator.

{{{unit}}}
|UNIT V | CODE OPTIMIZATION | 9 |
Principal sources of optimization -- DAG -- Optimization of basic
blocks -- Global data flow analysis -- Introduction to Low Level
Virtual Machine (LLVM) -- Design of LLVM -- Core libraries --
Developing plugin in LLVM.

#+begin_comment
Added:Introduction to Low Level Virtual Machine (LLVM) - Design of
LLVM - Core libraries - Developing plugin in LLVM.
 
Deleted: Peephole optimization - Efficient dataflow algorithm

Suggestion: Saraswathi : 2021: Unit 5 BB, BP, DT - Subject handling staff told that this unit LLVM is new topic and after completing this semester they will give their feedback on LLVM

#+end_comment

\hfill *Theory Periods: 45* 

** SUGGESTIVE EXPERIMENTS
1. Implementation of Lexical Analyzer using Lex Tool
2. Implementation of Arithmetic Calculator using LEX and YACC
3. Generation of TAC for a simple program using LEX and YACC
4. Use modern tools and technologies to design a new optimized compiler that takes a novel language and generate the machine languag as a team.   
5. Study of LLVM framework.

#+begin_comment
Changes:Suggestive experiments are changed based on the units.#
Deleted: Extension of the Lexical Analyzer to implement symbol
table,Implementation of Simple Code Optimization Techniques.#
Added:Study of LLVM framework.


changes: "Consider a simple program as an input and process this code to Â  printthe intermediate code after every phase. It is necessary toÂ Â  printthe output of lexical, syntax, semantic, intermediate codeÂ Â generation, code optimization and code generation phases"Â  replaced with simple program and ex4 is used as co6
#+end_comment


\hfill *Practical Periods: 30*

\hfill *Total Periods: 75*

** COURSE OUTCOMES
After the completion of this course, students will be able to 
1. Construct a lexical analyzer for a sample language (K3)
2. Apply different parsing algorithms to develop the parsers for the given grammar (K3)
3. Build syntax directed translation for programming language constructs (K3)
4. Outline and develop a simple code generator (K3)
5. Make use of code optimization techniques (K3)
6. Construct a compiler for a simple language using modern tools (K6).


#+begin_comment
Saraswathi: replaced words with action verbs
#+end_comment

** TEXT BOOKS
1. Alfred V Aho, Monica S Lam, Ravi Sethi, Jeffrey D. Ullman,
   ``Compilers: Principles, Techniques and Tools'', 2nd Edition,
   Pearson Education, 2009.
2. Rafael Auler, Bruno Cardoso Lopes, ``Getting Started with LLVM Core
   Libraries'', Packt Publishing, 2014.
   
#+begin_comment
Added: Rafael Auler, Bruno Cardoso Lopes, ``Getting Started with LLVM
Core Libraries'', Packt Publishing, 2014.
#+end_comment


** REFERENCE BOOKS
1. Randy Allen, Ken Kennedy, ``Optimizing Compilers for Modern
   Architectures: A Dependence Based Approach'', Morgan Kaufmann
   Publishers, 2001.
2. Steven S. Muchnick, ``Advanced Compiler Design and
   Implementation'', Morgan Kaufmann Publishers - Elsevier Science,
   India, Indian Reprint 1997.
3. Keith D Cooper, Linda Torczon, ``Engineering a Compiler'',
   Morgan Kaufmann Publishers Elsevier Science, 2011.
4. Andrew W. Appel, ``Modern Compiler Implementation in C'', Cambridge
   University Press, 1st  edition, 2004.
5. Watson, Des, ``A Practical Approach to Compiler Construction'',
   1st edition, Springer-Verlog, 2017.
   
#+begin_comment
Changed: Saraswathi : 2021: RBook 2 year changed from 2003 to 1997   ;  RBook 3 year chaged to 2011
#+end_comment

** CO TO PO/PSO MAPPING
| PO/PSO |  1 |  2 | 3 |  4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |  1 |  2 |
|--------+----+----+---+----+---+---+---+---+---+----+----+----+----+----|
| CO1    |  3 |  2 |   |  3 |   |   |   |   |   |    |    |    |  2 |  3 |
| CO2    |  3 |  2 |   |  3 |   |   |   |   |   |    |    |    |  2 |  3 |
| CO3    |  3 |  2 |   |  3 |   |   |   |   |   |    |    |    |  2 |  3 |
| CO4    |  3 |  2 |   |  3 |   |   |   |   |   |    |    |    |  2 |  3 |
| CO5    |  3 |  2 |   |  3 |   |   |   |   |   |    |    |    |  2 |  3 |
| CO6    |    |  3 | 3 |  3 | 3 |   |   |   |   |  2 |    |    |  3 |  3 |
|--------+----+----+---+----+---+---+---+---+---+----+----+----+----+----|
| Score  | 15 | 13 | 3 | 18 | 3 |   |   |   |   |  2 |    |    | 13 | 18 |
| Course |  3 |  3 | 3 |  3 | 3 |   |   |   |   |  2 |    |    |  3 |  3 |
