* 203 FUNDAMENTALS AND PRACTICE OF SOFTWARE DEVELOPMENT
:properties:
:author: Dr R Kanchana, Dr R S Milton, Dr T T Mirnalinee
:date: 16 March 2021
:end:

#+startup: showall

{{{credits}}}
| L | T | P |   C |
| 2 | 1 | 3 | 4.5 |
		
** CO-PO Mapping                                                   :noexport:
|                | PO1 | PO2 | PO3 | PO4 | PO5 | PO6 | PO7 | PO8 | PO9 | PO10 | PO11 | PO12 | PSO1 | PSO2 | PSO3 |
| CO1            |   1 |   3 |     |   2 |     |     |     |     |     |      |      |      |    3 |    2 |      |
| CO2            |   2 |   3 |     |   1 |     |     |     |     |     |      |      |      |    3 |    1 |      |
| CO3            |   1 |   3 |   3 |   3 |   3 |     |     |     |     |      |      |      |    3 |    3 |    3 |
| CO4            |     |     |     |     |     |     |     |   1 |     |    3 |    1 |    1 |      |      |      |
| CO5            |     |     |     |     |     |     |     |     |   3 |    3 |    2 |    1 |      |    1 |      |
| CO6            |     |     |     |     |     |   2 |   2 |   1 |     |      |      |      |      |      |      |
| CO7            |   3 |   3 |   3 |   3 |     |     |     |     |     |      |      |      |    2 |    1 |      |
| Score          |   7 |   12|   6 |   9 |   3 |   2 |   2 |   2 |   3 |    6 |    3 |    2 |    9 |    8 |    3 |
| Course Mapping |   2 |   3 |   3 |   3 |   3 |   2 |   2 |   1 |   3 |    3 |    2 |    1 |    3 |    2 |    3 |
#+tblfm: @>$2..@>$>='(ceiling (/ (* 1.0 (apply '+ '(@<<..@>>)))(length '(@<<..@>>))));N

** COURSE OBJECTIVES
- To link system building to computing fundamentals.
- To progress from fundamental principles to larger engineering
  systems
- To motivate independent learning and exploration.

** LECTURES (30 hours)
{{{unit}}}
| UNIT I | PROGRAM DEVELOPMENT BASICS | 7 |
Algorithm -- modularity, reusability, maintainability. Software
engineering fundamentals: project management, feasibility study. Best
practices and guidelines for Programming.  Structure of a C program --
data types -- variables and constants -- operators and expressions -
input and output statements -- control statements.

{{{unit}}}
| UNIT II | FUNCTIONS  | 6 |
Function prototype -- function definition and call -- passing
parameters -- recursion. Program structure: storage classes â€“
multi-file programs-- Standard library functions;

{{{unit}}}
| UNIT III | ARRAYS AND STRINGS  | 6 |
Arrays: declaration, initialization -- multi-dimensional arrays --
passing arrays to functions; Strings: reading and writing strings,
string operations, string library functions.

{{{unit}}}
| UNIT IV | POINTERS   | 6 |
Pointers: Pointer operators -- Pointer to an array -- Array of
pointers -- Command line arguments. Dynamic memory allocation --
Pointer to a function -- Passing pointers to functions -- Problems in
using pointers.

{{{unit}}}
| UNIT V | STRUCTURES   | 5 |
User defined data types -- Structures: Structures and functions --
Array of structures -- Pointer to a structure -- Type definition
(typedef).  Enumerated data type. 

#+BEGIN_COMMENT
{{{unit}}}
| UNIT II | DATABASES  | 6 |
Databases: Relational Databases -- SQL -- SQLite.

{{{unit}}}
| UNIT III | WEB APPLICATION DEVELOPMENT | 6 |
Web Application Development: HTML and CSS -- JavaScript;
Security; Developing Single Page Application; Mobile
Applications.

{{{unit}}}
| UNIT IV | DATA SCIENCE | 6 |
Data Science: Regression -- Classification -- Visualization
-- Scikit-Learn.

{{{unit}}}
| UNIT V | SOFTWARE ENGINEERING | 6 |
Software Engineering: Planning -- Project management --
Feasibility study -- Cost-Benefit analysis -- Modular and
architecture Design -- Documentation; Ethics and best
practices in Engineering.
#+END_COMMENT

** LAB ASSIGNMENTS (15 hours)
1. Algorithm writing, verification and test case design (1)
2. Programs using looping constructs
3. Programs using functions with different parameter passing
   techniques: Call by value, call by reference (e.g. changing the
   elements of an array), Recursion
4. Programs using one dimensional arrays
5. Programs using strings and their operations (e.g. concatenation of
   strings, extracting a substring, checking for palindrome, search
   for a given string using binary search)
6. Programs to demonstrate simple structure manipulations and passing
   structures to a function (e.g. generating a transcript with CGPA
   and class obtained, operations on complex numbers, difference
   between times)

# In all the above assignments, wherever applicable, focus on
# reflection and introspection on learning outcome.

** STUDIO SESSIONS (15 sessions of 3 hours each)
- /Sample Case Study/: Timetable Management System for an Academic
  Institution
- /Input/: Set of courses in a semester, Type of courses, Classrooms,
  Labs, Faculty offerings, Student degree, Year and Section
- /Output/: Timetable for a week satisfying the following constraints
- /Constraints/:
  - All theory courses for a class are scheduled in the same room.
  - More than one lab course cannot be scheduled in the lab at the same time.
  - A faculty does not handle more than 2 sessions per day for the same course.
  - A faculty cannot handle more than one class in each session.

\hfill *Total Hours: 30 + 15 + 45 = 90*

** COURSE OUTCOMES
After the completion of this course, students will be able to:
- Formulate a problem, specifying the requirements and
  identifying the scope and boundaries (K3).
- Apply engineering fundamentals in Computer Science to
  industrial applications or products (K3).
- Design and develop solutions with novel technologies,
  tools, and techniques (K3).
- Communicate effectively through reflections, reports, and
  presentations (K3).
- Work in teams to develop modules and integrate them (K3).
- Analyze the impact on health, safety, society, environment
  as well as underlying legal and ethical considerations
  wherever are applicable (K3).
- Solve programming problems using basic constructs in C programming
  language (K3).

** INSTRUCTIONS
1. Instructor provides the links in Internet, industry links
   and professional magazine articles available in SSN
   library and asks the students to study systems or
   industrial applications based on the fundamentals learnt.
   Students must submit a short report on various problems
   and applications, tools and knowledge required to design
   such a system.
2. The instructor introduces the general aspects of timetable
   management / scheduling problem and constraints involved. Further,
   the faculty provides pointers to applications of this problem in
   various other domains.
3. Students are grouped into teams and each team is asked to
   formulate timetable management in different domains and
   identify the scope and constraints of their problem.
4. Students are asked to evolve an architecture design along
   with the design of individual modules. They need to plan a
   timeline too.
5. Students are asked to explore safety, health, ethical,
   environmental, societal impact (whichever applicable) of
   the applications and investigate legal and ethical
   aspects. A detailed report of the problem formulation,
   scope and constraints, design must be submitted.
6. Students are asked to find out the technologies used to
   implement their work and analyze the feasibility. With the
   selected tools and technologies, they are asked to
   implement their solution.
7. Students are asked to demonstrate their solutions in two
   stages (after 50% completion and after 100% completion of
   the implementation)
8. Students are asked to present their problem, methodology,
   and solution.
9. Students are asked to document their learning experience
   as a reflection of the skills acquired.
10. Students are asked to explore limitations of their
    solution in terms of security, reliability, code
    reusability and adaptability.

** COMMENT EVALUATION
#+latex: \newcolumntype{Y}{>{\small\raggedright\arraybackslash}X}
#+latex: \newcolumntype{A}{>{\small\raggedright\arraybackslash\hsize=.7\hsize}X}
#+latex: \newcolumntype{B}{>{\small\raggedright\arraybackslash\hsize=1.2\hsize}X}
#+latex: \newcolumntype{C}{>{\small\raggedright\arraybackslash\hsize=1\hsize}X}
#+attr_latex: :environment tabularx :width \textwidth :align BBAAAA

| <10>       | <40>                                     |       <10> |       <10> |       <10> |       <10> |
|------------+------------------------------------------+------------+------------+------------+------------|
| Asssessment tool | Execution                                | Peer review and rating |  Viva voce | Presentation |     Report |
|------------+------------------------------------------+------------+------------+------------+------------|
| Review 1 by instructor: Design | Problem formulation, scope: 60           |         10 |            |            |         30 |
|------------+------------------------------------------+------------+------------+------------+------------|
| Mid sem evaluation by a committee | Planning and modules: 20, Technical: 20, Ethics/Best practices: 10 |            |         10 |         20 |         20 |
|------------+------------------------------------------+------------+------------+------------+------------|
| Review 2 by instructor: Implementation | Implementation, demo, testing, user interface: 90 |         10 |            |            |            |
|------------+------------------------------------------+------------+------------+------------+------------|
| End sem evaluation by a committee | Demo  (Innovation, emerging technologies, security, user interface): 40 |            |         10 |         10 |         20 |
|------------+------------------------------------------+------------+------------+------------+------------|

** ASSESSMENT
| Assessment Tool         | Weight |    |
|-------------------------+--------+----|
| /Continous assessment/  |     50 |    |
| CAT 1 (Theory)          |        | 15 |
| CAT 2 (Theory / Lab)    |        | 15 |
| Lab work                |        | 20 |
| /Project Assessment/    |     50 |    |
| Review 1                |        |  5 |
| Review 2                |        |  5 |
| Mid semester evaluation |        | 15 |
| End semester evaluation |        | 25 |
|-------------------------+--------+----|
| Total                   |    100 |    |

#+BEGIN_COMMENT
| Assessment Tool      | Weightage |     |
|----------------------+-----------+-----|
| End semester exam    |       25% |     |
| Continous assessment |       75% |     |
| Class activity       |           | 10% |
| Review 1             |           | 10% |
| Review 2             |           | 15% |
| Review 3             |           | 20% |
| Mid semester review  |           | 20% |
| End semester review  |           | 25% |
|----------------------+-----------+-----|
| Total                |      100% |     |

| Assessment Tool | Weightage |     |
|-----------------+-----------+-----|
| Class Activity  |       25% |     |
| Project         |       75% |     |
| Review 1        |           | 10% |
| Review 2        |           | 20% |
| Review 3        |           | 20% |
| Mid Sem Review  |           | 20% |
| End Sem Review  |           | 30% |
|-----------------+-----------+-----|
| Total           |      100% |     |
#+END_COMMENT
** TEXT BOOKS
1. Byron Gottfried, Programming with C (Schaum's Outlines Series),
   McGraw-Hill Education, 3rd Edition, 2017.
2. Brian W Kernighan and Dennis M Ritchie, The C Programming Language,
   Pearson Education India, 2nd Edition, 2015.

** REFERENCES
1. Reema Thareja, Programming in C, Oxford University Press, 2nd Edition, 2016.
2. Yashwant Kanetkar, Let Us C, BPB Publications, 14th Edition, 2016.
3. King, K.N., C Programming A Modern Approach, W. W. Norton & Company, II Ed. 2008.
#+BEGIN_COMMENT
Technical Outcome.
Could you learn?
Rate yourself in the scale of 1 to 3
1 -- Not confident, more practice required.
2 - Could modify available code but not able to write
own logic.
3 - Proficient
1 Task 1
2 Task 2
Best Practices / Application of fundaments learnt in theory courses
Suggested by the Instructor
Could you follow?
Rate yourself in the scale of 1 to 3
1 -- Needs to improve.
2 - Inconsistent in applying
3 - Proficient with the practice
B1 Design before coding
B2 Modular design and coding
using versions
#+END_COMMENT
