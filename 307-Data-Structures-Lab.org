* <<<307>>> DATA STRUCTURES LAB
:properties:
:author: Mr. H. Shahul Hamead and Ms. M. Saritha 
:date: 09-03-2021 
:end:

#+startup: showall
** CO PO MAPPING :noexport:
#+NAME: co-po-mapping
(Once COs are finalized, CO PO mapping can be updated)

|                | PO1 | PO2 | PO3 | PO4 | PO5 | PO6 | PO7 | PO8 | PO9 | PO10 | PO11 | PO12 | PSO1 | PSO2 | PSO3  |
| CO1            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   0 |    0 |    0 |    2 |    3 |    3 |    2  |
| CO2            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   0 |    0 |    0 |    2 |    3 |    3 |    2  |
| CO3            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   0 |    0 |    0 |    2 |    3 |    3 |    2  |
| CO4            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   0 |    0 |    0 |    2 |    3 |    3 |    2  |
| CO5            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   3 |    3 |    0 |    2 |    3 |    3 |    2  |
| Score          |  10 |  15 |  15 |  15 |  0  |  0  |  0  |   0 |   3 |    3 |    0 |   10 |   10 |   15 |    6  |
| Course Mapping |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   3 |    3 |    0 |    2 |    3 |    3 |    2  |

{{{credits}}}
| L | T | P | C |
| 0 | 0 | 4 | 2 |

** REVISION 2021                                                   :noexport:
1. Array implementation of list ADT is removed as C programs are included
2. One application of linked list and expression tree implementation are removed because the Mini project has been included.

** COURSE OBJECTIVES
- Develop program solutions for various problems
- Apply suitable data structures, linear and non linear for a given problem statement
- Design the data structure for the given problem and implement them in a high level programming language.

** SUGGESTIVE EXPERIMENTS
1. Implement solutions for problems using arrays and pointers 
2. Implement suitable solution for a given problem (using structures)
3. Implementation of Linked List ADT (e.g Manage student records)
4. Implement hashing using separate chaining technique 
5. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations)
6. Implementation of Stack ADT (e.g Balancing paranthesis, infix to postfix conversion, evaluation of postfix expression)
7. Implementation of Queue ADT (e.g Simulating printer jobs)
8. Implement binary search tree and perform its pre-order, in-order, and post-order traversals
9. Implement AVL trees (e.g Implement dictionary)  
10. Implement priority queue using binary heaps (e.g Storing employee records based upon salary)
11. Represent the graphs and implement graph traversal algorithms 
12. Implement Dijkstra's algorithm using graph (e.g Find the shortest route to connect one city to another)
13. Mini Project

\hfill *Total Periods: 60*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
- Develop programs for a given problem using pointers and structures (K3)
- Analyze and apply suitable linear data structures to solve a given problem (K4) 
- Apply suitable trees for various applications and perform traversals (K3)
- Make use of graphs to solve appropriate problems (K3)
- Design and develop applications by choosing suitable data structure(s) for solving real world problems (K6).

** LABORATORY REQUIREMENT FOR BATCH OF 25 STUDENTS
Hardware:\\
    1. Standalone Systems - 25 Nos 
Software:\\
    1. C / C++ Compiler 
      
