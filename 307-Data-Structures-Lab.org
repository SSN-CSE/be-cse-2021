* <<<307>>> DATA STRUCTURES LAB
:properties:
:author: Mr. H. Shahul Hamead and Ms. M. Saritha 
:date: 09-03-2021 
:end:

Array implementation of list ADT

#+startup: showall
** CO PO MAPPING :noexport:
#+NAME: co-po-mapping
|                | PO1 | PO2 | PO3 | PO4 | PO5 | PO6 | PO7 | PO8 | PO9 | PO10 | PO11 | PO12 | PSO1 | PSO2 | PSO3  |
| CO1            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   0 |    0 |    0 |    2 |    3 |    3 |    2  |
| CO2            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   0 |    0 |    0 |    2 |    3 |    3 |    2  |
| CO3            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   0 |    0 |    0 |    2 |    3 |    3 |    2  |
| CO4            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   0 |    0 |    0 |    2 |    3 |    3 |    2  |
| CO5            |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   3 |    3 |    0 |    2 |    3 |    3 |    2  |
| Score          |  10 |  15 |  15 |  15 |  0  |  0  |  0  |   0 |   3 |    3 |    0 |   10 |   10 |   15 |    6  |
| Course Mapping |   2 |   3 |   3 |   3 |  0  |  0  |  0  |   0 |   3 |    3 |    0 |    2 |    3 |    3 |    2  |

{{{credits}}}
| L | T | P | C |
| 0 | 0 | 4 | 2 |

** COURSE OBJECTIVES
- Design program solutions for various problems
- Apply suitable data structures, linear and non linear for a given problem statement
- Design the data structure for the given problem and implement them in a high level programming language
- Apply suitable hashing techniques for a given problem.


** SUGGESTIVE EXPERIMENTS
1. Implement solutions for problems using arrays and pointers 
2. Implement suitable solution for a given problem (using structures)
3. Implementation of Linked List ADT (e.g Manage student records)
4. Represent polynomial expression as linked list and write functions for polynomial manipulation
5. Implement hashing using separate chaining technique 
6. Implement doubly linked list ADT (e.g Insert, delete, search, merge, reverse operations)
7. Implementation of Stack ADT (e.g Balancing paranthesis, infix to postfix conversion, evaluation of postfix expression)
8. Implementation of Queue ADT (e.g Simulating printer jobs)
9. Implement an expression tree. Produce its pre-order, in-order, and post-order traversals
10. Implement binary search tree 
11. Implement AVL trees (e.g Implement dictionary)  
12. Implement priority queue using binary heaps (e.g Storing employee records based upon salary)
13. Graph representation and implement graph traversal algorithms 
14. Implement Dijkstra's algorithm using graph (e.g Find the shortest route to connect one city to another)
15. Mini Project

\hfill *Total Periods: 60*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
- Develop applications for a given problem using pointers and structures (K3)
- Analyze and apply linear data structures to solve a given problem (K4) 
- Make use of non-linear data structures for various problem solutions (K3)
- Apply hashing techniques for data storage and retrieval (K3)
- Design and develop applications by choosing suitable data structure(s) for solving real world problems (K6).

** LABORATORY REQUIREMENT FOR BATCH OF 25 STUDENTS
Hardware:\\
    1. Standalone Systems - 25 Nos 
Software:\\
    1. C / C++ Compiler 
      
