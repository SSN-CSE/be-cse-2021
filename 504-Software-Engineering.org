* 
:properties:
:author: Dr. A. Chamundeswari and Ms. S. Angel Deborah
:date: 13.3.2021(Revision1)/ 24..3.2021(Revision based on review)/29.3.2021(Changes highlighted)/6.06.2021(Checked)
:end:


#+startup: showall
{{{title-tab}}}
| CODE    | COURSE TITLE         | L | T | P | C |
| UCS2503 | SOFTWARE ENGINEERING | 3 | 0 | 0 | 3 |

** R2021 CHANGES :noexport:
1. New terminlogy like Phases of the SDLC introduced
2. Secure development life cycle dropped
3. Agility in UNIT 1 of R2018 moved to UNIT 5 
4. Project planning and software estimation of UNIT 2 in R2018 is moved to UNIT 1 
5. UNIT 1 renamed as SOFTWARE PROCESS AND PLANNING
6. UNIT 3 of R2018 reordered as UNIT 2
7. UNIT 4 of R2018 reordered as UNIT 3
8. User Interface design dropped
9. Architecture for Network based Applications and Decentralized Architectures added
10. UNIT 5 of R2018 reordered as UNIT 4
11. Reengineering, Reverse Engineering, Restructuring dropped
12. UNIT 5 - AGILE DEVELOPMENT AND DEVOPS introduced
13. Armando Fox and David Patterson's book added as text book
14. Ian Sommerville's book moved to reference
15. Rajib Mall's book and Pankaj Jalote's book dropped
16. Brian Albee's book added as reference book
17. Recent edition of Pressman's book and Ian Sommerville's book updated

** COURSE OBJECTIVES
- To understand the phases in a software project, estimate cost and effort.
- To understand fundamental concepts of requirements engineering and Analysis Modeling.
- To understand the various software design methodologies
- To learn various testing techniques and maintenance measures.
- To understand agile development and Devops

{{{unit}}}
| UNIT I | SOFTWARE PROCESS AND PLANNING | 9 |

Introduction to Software Engineering; Objectives, Principles and Practices; The Software Development Life Cycle : Pre-development phases of the SDLC -- Development specific phases of the SDLC -- Post-development phases of the SDLC; Methodologies Paradigm and Practices : Process methodologies -- Development paradigms -- Development practices; 

Project Planning Process; Software Project Estimation: Decomposition techniques -- Empirical estimation models -- The make/buy decision -- Project scheduling; Risk Management.


{{{unit}}}
| UNIT II | REQUIREMENTS ANALYSIS AND SPECIFICATION | 9 |

Software Requirements: Functional and non-functional -- Security requirements -- User requirements -- System requirements -- Software requirements document; Requirement Engineering Process: Feasibility studies -- Requirements elicitation and analysis -- Requirements validation -- Requirements Management; Classical Analysis: Structured system analysis; Requirement modelling tools.


{{{unit}}}
| UNIT III | SOFTWARE DESIGN | 9 |
Design Concepts: Design process -- Design concepts -- Modularity, Coupling and cohesion -- Design model -- Modeling principles; Structured Design; Architectural Design: Architectural styles; Architecture for Network based Applications â€“ Decentralized Architectures. 
 

{{{unit}}}
| UNIT IV | SOFTWARE TESTING | 9 |
Software Testing Fundamentals; Internal and External Views of Testing: White box testing -- Basis path testing -- Control structure testing-- Black box testing -- Unit testing -- Integration testing -- Regression testing -- Validation testing -- System testing -- Security testing ;Testing Tool; Debugging; Software Implementation: Coding Practices and Principles; Maintenance: Types.



{{{unit}}}
| UNIT V | AGILE DEVELOPMENT AND DEVOPS | 9 |
Agile Development: Agile Teams -- Team and Scrum --  Branches -- Pull Requests --  Reviews -- Integration -- Agile Iterations -- Reporting and fixing bugs; Dev/Ops: From development to deployment -- Three-Tier -- Responsiveness, Service level objectives, and Apdex -- Releases and feature flags -- Monitoring and finding bottlenecks -- Improving rendering and database performance with caching; Security: Defending customer data in application.



\hfill *Total Periods: 45*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
- Choose an appropriate process model and estimate project cost and effort required(K4)
- Analyse and model requirements (K4)
- Apply systematic procedure for software design (K3)
- Compare and contrast the various testing and maintenance activities (K2)
- Make use of agile development and Devops (K3)
- Select an appropriate process model to construct a system in teams by applying best practices and principles in software engineering (K5)

** TEXT BOOKS
1. Roger S Pressman, Bruce R.Maxin ``Software Engineering -- A Practitioner's Approach'', McGraw-Hill International Edition, Eighth Edition, 2015.
2. Armando Fox and David Patterson , Engineering Software as a  Service: An Agile Approach Using Cloud Computing'', Strawberry Canyon LLC, Second Beta Edition, 2021.

** REFERENCES
1. Ian Sommerville, ``Software Engineering'', Pearson Education Asia,Tenth Edition, 2015.
2. Stephen R Schach, ``Software Engineering'', Tata McGraw-Hill Publishing Company Limited,2007.
3. Brian Albee, Hands-On SoftwareEngineering with Python,  Packt Publishing, 2018.
4. Kelkar S A,``Software Engineering'', Prentice Hall of India, 2007.


** CO TO PO/PSO MAPPING
#+NAME: co-po-mapping
| PO/PSO | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 1 | 2 | 3 |
|--------+---+---+---+---+---+---+---+---+---+----+----+----+---+---+---|
| CO1    | 2 | 2 | 1 | 0 | 0 | 0 | 0 | 0 | 0 |  0 |  0 |  0 | 3 | 3 | 0 |
| CO2    | 2 | 2 | 3 | 0 | 0 | 0 | 0 | 0 | 0 |  0 |  0 |  0 | 2 | 3 | 0 |
| CO3    | 2 | 3 | 3 | 0 | 0 | 0 | 0 | 0 | 0 |  0 |  0 |  0 | 2 | 3 | 0 |
| CO4    | 2 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 |  0 |  0 |  0 | 2 | 3 | 0 |
| CO5    | 2 | 2 | 1 | 0 | 0 | 0 | 0 | 0 | 0 |  0 |  0 |  0 | 2 | 3 | 0 |
| CO6    | 2 | 3 | 3 | 0 | 0 | 2 | 1 | 2 | 3 |  3 |  1 |  1 | 3 | 3 | 0 |
|--------+---+---+---+---+---+---+---+---+---+----+----+----+---+---+---|
| Course | 2 | 3 | 2 | 0 | 0 | 1 | 1 | 1 | 1 |  1 |  1 |  1 | 3 | 3 | 0 |

# | Score          | 12 | 13 | 12 | 0 | 0 | 2 | 1 | 2 | 3 |  3 |  1 |  1 | 14 | 18 | 0 |
