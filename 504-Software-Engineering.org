* <<<504>>> SOFTWARE ENGINEERING
:properties:
:author: Dr. A. Chamundeswari and Ms. S. Angel Deborah
:date: 
:end:

#+begin_comment
1. Almost the same as AU; Units have been reordered
2. For changes, see the individual units
3. Not applicable
4. Five course outcomes are specified and they align to each unit. Course objectives are also specified
5. Not applicable
#+end_comment

#+begin_comment
1. Few Suggestions have been incorporated.
#+end_comment


#+startup: showall
** CO PO MAPPING :noexport:
#+NAME: co-po-mapping
|                |    | PO1 | PO2 | PO3 | PO4 | PO5 | PO6 | PO7 | PO8 | PO9 | PO10 | PO11 | PO12 | PSO1 | PSO2 | PSO3 |
|                |    |  K3 |  K4 |  K5 |  K5 |  K6 |   - |   - |   - |   - |    - |    - |    - |   K5 |   K3 |   K6 |
| CO1            | K4 |   3 |   3 |   2 |   0 |   0 |   1 |   0 |   1 |   1 |    1 |    1 |    1 |    2 |    3 |    2 |
| CO2            | K3 |   3 |   2 |   2 |   0 |   0 |   1 |   0 |   1 |   1 |    1 |    3 |    1 |    2 |    3 |    1 |
| CO3            | K3 |   3 |   2 |   2 |   0 |   0 |   1 |   0 |   1 |   1 |    1 |    1 |    1 |    2 |    3 |    1 |
| CO4            | K3 |   3 |   2 |   2 |   0 |   0 |   1 |   0 |   1 |   1 |    1 |    1 |    1 |    2 |    3 |    1 |
| CO5            | K2 |   2 |   2 |   1 |   0 |   0 |   1 |   0 |   1 |   1 |    1 |    1 |    1 |    1 |    2 |    1 |
| Score          |    |  14 |  11 |   9 |   0 |   0 |   5 |   0 |   5 |   5 |    5 |    7 |    5 |    9 |   14 |    6 |
| Course Mapping |    |   3 |   3 |   2 |   0 |   0 |   1 |   0 |   1 |   1 |    1 |    2 |    1 |    2 |    3 |    2 |


{{{credits}}}
| L | T | P | C |
| 3 | 0 | 0 | 3 |

** COURSE OBJECTIVES
- To understand the phases in a software project
- To understand fundamental concepts of requirements engineering and
  Analysis Modeling.
- To understand the various software design methodologies
- To learn various testing techniques and maintenance measures.

{{{unit}}}
| UNIT I | SOFTWARE PROCESS MODELS | 9 |
Introduction to software engineering; Principles and practices; Software Process: Generic process model -- Perspective and specialized
process models; Introduction to Agility: Agile process model.

#+begin_comment
1. Removed: Secure development lifecycle
#+end_comment

{{{unit}}}
| UNIT II | PROJECT PLANNING AND MANAGEMENT | 9 |
Project planning process; Software Project Estimation: Decomposition techniques -- Empirical estimation models -- The make/buy decision -- Project scheduling; Risk Management: Risk identification -- Risk projection -- Risk mitigation.


{{{unit}}}
| UNIT III | REQUIREMENTS ANALYSIS AND SPECIFICATION | 9 |
Software Requirements: Functional and non-functional --security requirements -- User requirements -- System requirements -- Software requirements document; Requirement Engineering Process: Feasibility studies -- Requirements elicitation and analysis -- Requirements validation -- Requirements Management; Classical Analysis: Structured system analysis; Requirement modelling tools.

#+begin_comment
1. Removed: Petrinet
2. Added: Requirements modelling tools
#+end_comment

{{{unit}}}
| UNIT IV | SOFTWARE DESIGN | 9 |
Design Concepts: Modularity -- Abstraction-- Functional Independence -- Information hiding -- Refinement;Architectural Design: Architectural Styles--Architectural Mapping using Dataflow; Component Level Design: Coupling and cohesion-- Designing Traditional Components;User Interface Design: The Golden rules -- Interface Analysis -- Interface Design steps; Design for security.

#+begin_comment
1. Removed: Design process, Design model, Modeling principles
2. Added: specific topics in design concept (Modularity -- Abstraction-- Functional Independence -- Information hiding -- Refinement)
#+end_comment


{{{unit}}}
| UNIT V | TESTING AND MAINTENANCE | 9 |
Software Testing Fundamentals; Internal and External Views of Testing: White Box Testing -- Basis Path Testing -- Control Structure Testing-- Black Box Testing -- Unit Testing -- Integration Testing -- Regression Testing -- Validation Testing -- System Testing -- Security Testing; Debugging; Software Implementation: Coding Practices and Principles; Maintenance: Types -- Reengineering versus Reverse Engineering.

#+begin_comment
1. Removed: Restructuring.
2. Added: Reengineering versus Reverse Engineering 
#+end_comment


\hfill *Total Periods: 45*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
- Understand principles of software engineering and choose an appropraite process model (K4)
- Manage project schedule, estimate project cost and effort required (K3)
- Perform requirements analysis and modeling (K3)
- Apply systematic procedure for software design (K3)
- Compare and contrast the various testing and maintenance activities (K2)
- Solve real world problems in teams by choosing suitable analysis modeling approach (K3)

** TEXT BOOKS
1. Roger S Pressman, ``Software Engineering -- A Practitioner's Approach'', McGraw-Hill International Edition, Seventh Edition, 2010.
2. Ian Sommerville, ``Software Engineering'', Pearson Education Asia,Nineth Edition, 2011.

** REFERENCES
1. Rajib Mall, ``Fundamentals of Software Engineering'', PHI Learning  Private Limited, Third Edition, 2009.
2. Pankaj Jalote, ``Software Engineering, A Precise Approach'', Wiley  India, 2010.
3. Kelkar S A,``Software Engineering'', Prentice Hall of India, 2007.
4. Stephen R Schach, ``Software Engineering'', Tata McGraw-Hill Publishing Company Limited,2007.
5. https://www.cisco.com/c/dam/en_us/about/doing_business/trust-center/docs/cisco-secure-development-lifecycle.pdf
